code:

from collections import deque

# Define the capacities of the two jugs
CAPACITY_A = 4
CAPACITY_B = 3
GOAL = 2

# State is represented as (a, b) â€” current amount in Jug A and Jug B
def is_goal(state):
    a, b = state
    return a == GOAL or b == GOAL

def get_next_states(state):
    a, b = state
    next_states = []

    # Fill Jug A
    next_states.append((CAPACITY_A, b))

    # Fill Jug B
    next_states.append((a, CAPACITY_B))

    # Empty Jug A
    next_states.append((0, b))

    # Empty Jug B
    next_states.append((a, 0))

    # Pour A -> B
    pour = min(a, CAPACITY_B - b)
    next_states.append((a - pour, b + pour))

    # Pour B -> A
    pour = min(b, CAPACITY_A - a)
    next_states.append((a + pour, b - pour))

    return next_states

def bfs(start_state):
    queue = deque([(start_state, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()

        if current_state in visited:
            continue

        visited.add(current_state)
        path = path + [current_state]

        if is_goal(current_state):
            return path

        for next_state in get_next_states(current_state):
            if next_state not in visited:
                queue.append((next_state, path))

    return None

# Start from empty jugs
solution = bfs((0, 0))

# Display the result
if solution:
    print("Solution found:")
    for step in solution:
        print(f"Jug A: {step[0]} L, Jug B: {step[1]} L")
else:
    print("No solution found.")



output:
Jug A: 0 L, Jug B: 0 L
Jug A: 0 L, Jug B: 3 L
Jug A: 3 L, Jug B: 0 L
Jug A: 3 L, Jug B: 3 L
Jug A: 4 L, Jug B: 2 L
