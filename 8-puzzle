code:

iimport heapq

# Goal state
GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Moves: up, down, left, right
MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]


def manhattan_distance(state):
    """Calculate the Manhattan distance heuristic for a given state."""
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                goal_x, goal_y = divmod(val - 1, 3)
                distance += abs(goal_x - i) + abs(goal_y - j)
    return distance


def find_zero(state):
    """Find the position of the empty space (0)."""
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j


def is_valid(x, y):
    return 0 <= x < 3 and 0 <= y < 3


def copy_state(state):
    return [row[:] for row in state]


def a_star(start):
    """A* search algorithm to solve the 8 puzzle."""
    open_set = []
    heapq.heappush(open_set, (0 + manhattan_distance(start), 0, start, []))
    visited = set()

    while open_set:
        estimated_cost, cost, current, path = heapq.heappop(open_set)
        current_tuple = tuple(tuple(row) for row in current)

        if current == GOAL_STATE:
            return path + [current]

        if current_tuple in visited:
            continue
        visited.add(current_tuple)

        zero_x, zero_y = find_zero(current)

        for dx, dy in MOVES:
            nx, ny = zero_x + dx, zero_y + dy
            if is_valid(nx, ny):
                new_state = copy_state(current)
                new_state[zero_x][zero_y], new_state[nx][ny] = new_state[nx][ny], new_state[zero_x][zero_y]
                if tuple(tuple(row) for row in new_state) not in visited:
                    new_path = path + [current]
                    h = manhattan_distance(new_state)
                    heapq.heappush(open_set, (cost + 1 + h, cost + 1, new_state, new_path))

    return None


def print_path(path):
    for step in path:
        print("\n".join(" ".join(str(cell) for cell in row) for row in step))
        print()


# Example usage:
initial_state = [[1, 2, 3],
                 [4, 0, 6],
                 [7, 5, 8]]

solution = a_star(initial_state)

if solution:
    print(f"Solution found in {len(solution) - 1} moves:")
    print_path(solution)
else:
    print("No solution found.")


input:
[[1,2,3],[4,0,6],[7,5,8]]


output:

